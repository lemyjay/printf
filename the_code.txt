
MAIN.H
#ifndef MAIN_H
#define MAIN_H

#include <stdarg.h>
#include <stdio.h>
#include <unistd.h>
#include <limits.h>
#include <stdlib.h>

char handle_flags(const char *format, unsigned int *i);

/**
 * struct FormatSpecifier - Represents format specifiers and their handlers.
 *
 * @specifier: the format specifier character.
 * @handler: a function pointer to the handler for this specifier.
 *
 * Description: This structure is used to associate format specifier characters
 * with their corresponding handler functions.
 */
struct FormatSpecifier
{
	char specifier;
	void (*handler)(va_list, unsigned int *, unsigned int *, int, char, int,
			int);
};

/**
 * FormatSpecifier - Typedef for struct FormatSpecifier.
 */
typedef struct FormatSpecifier FormatSpecifier;

/* Declaration of functions to be used in the printf project */
int _printf(const char *format, ...);

void handle_format_specifier(
char specifier, va_list args, unsigned int *count,
unsigned int *i, char flags, int width, int precision);

void handle_char(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_string(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_percent(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_binary(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_integer(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_nosign(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_octal(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_hex(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_pointer(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_custom_string(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void handle_default(char specifier, unsigned int *count, unsigned int *i);

int print_string(const char *str);

void handle_rot13(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

void rot13(char *str);
void reverse_string(char *str);

void handle_reverse(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision);

int get_width(va_list args, const char *format, unsigned int *i);
int get_precision(va_list args, const char *format, unsigned int *i);
int _strlen(const char *str);
char *handle_precision(char *str, int precision, int *num_len);
#endif /* MAIN_H */



HANDLERS0.C
#include "main.h"
/**
 * handle_char - handles the char specifier.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier
 * @precision: handles precision.
 * @width: handles width.
 */
void handle_char(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	char c = va_arg(args, int);

	(void) casing;
	(void) flags;
	(void) precision;

	if (width > 0)
	{
		while (width > 1)
		{
			write(1, " ", 1);
			(*count)++;
			width--;
		}
	}

	write(1, &c, 1);
	(*count)++;
	(*i)++;
}

/**
 * print_string - prints a string and returns the number of characters printed.
 *
 * @str: a pointer to the string to be printed.
 * Return: the number of characters to be printed.
 */
int print_string(const char *str)
{
	unsigned int len = 0;

	while (str[len] != '\0')
	{
		write(1, &str[len], 1);
		len++;
	}

	return (len);
}

/**
 * handle_string - handles the string specifier.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_string(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	char *str = va_arg(args, char *), *new_str;
	int len;

	(void) casing;
	(void) flags;

	if (str == NULL)
		str = "(null)";

	len = _strlen(str);
	new_str = handle_precision(str, precision, &len);

	if (width > len)
	{
		char pad_char = (flags == '0') ? '0' : ' ';

		while (width > len)
		{
			write(1, &pad_char, 1);
			(*count)++;
			width--;
		}
	}

	(*count) += print_string(new_str);
	(*i)++;
	(new_str != str) ? free(new_str) : (void)0;
}

/**
 * binary_to_string - a function that converts a binary number to a string.
 *
 * @binary: the binary number to convert.
 * Return: a dynamically allocated string representing the binary number.
 * The caller is responsible for freeing the memory.
 */
char *binary_to_string(unsigned int binary)
{
	int length = 0, i;
	unsigned int temp = binary;
	char *buffer;

	do {
		temp >>= 1;
		length++;
	} while (temp > 0);

	buffer = (char *)malloc(length + 1);

	if (buffer == NULL)
		return (NULL);

	for (i = length - 1; i >= 0; i--)
	{
		buffer[i] = (binary & 1) ? '1' : '0';
		binary >>= 1;
	}

	buffer[length] = '\0';

	return (buffer);
}


/**
 * handle_binary - handles the binary specifier.
 *
 * @args: the va_list containing the argument
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_binary(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	unsigned int num = va_arg(args, unsigned int);
	char *buffer = binary_to_string(num);
	int len;

	(void) casing;
	(void) flags;
	(void) precision;

	if (buffer == NULL)
		return;

	len = _strlen(buffer);

	if (width > len)
	{
		while (width > len)
		{
			write(1, "0", 1);
			(*count)++;
			width--;
		}
	}

	(*count) += print_string(buffer);

	free(buffer);

	(*i)++;
}



HANDLERS1.C
#include "main.h"

/**
 * handle_long_min - helper function to handle INT_MIN and LONG_MIN
 *
 * @n: to determine if INT_MIN or LONG_MIN
 *
 * Return: buffer.
 */

static char *handle_long_min(int n)
{
	char imin_str[] = "-2147483648"; /* For INT_MIN */
	char lmin_str[] = "-9223372036854775808"; /* For LONG_MIN */
	int i, length;
	char *buffer;

	if (n == 1)
		length = sizeof(lmin_str) - 1;
	else if (n == 0)
		length = sizeof(imin_str) - 1;

	buffer = (char *)malloc(length + 1);

	if (buffer == NULL)
		return (NULL);

	if (n == 1)
	{
		for (i = 0; i < length; i++)
			buffer[i] = lmin_str[i];
	}
	else if (n == 0)
	{
		for (i = 0; i < length; i++)
			buffer[i] = imin_str[i];
	}

	buffer[length] = '\0';

	return (buffer);
}

/**
 * int_to_string - converts an integer to a string.
 *
 * @num: the integer to convert.
 *
 * Return: a dynamically allocated string representing the integer.
 * The caller is responsible for freeing the memory.
 */
char *int_to_string(long num)
{
	int temp, length = 1, index, is_negative = 0;
	char *buffer;

	if (num < 0)
	{
		if (num == LONG_MIN)
			return (handle_long_min(1));
		else if (num == INT_MIN)
			return (handle_long_min(0));
		is_negative = 1;
		num = -num;
	}

	temp = num;
	while (temp >= 10)
	{
		temp /= 10;
		length++;
	}

	buffer = (char *)malloc(length + (is_negative ? 2 : 1));
	if (buffer == NULL)
		return (NULL);

	index = length + (is_negative ? 1 : 0);
	buffer[index] = '\0';
	do {
		buffer[--index] = num % 10 + '0';
		num /= 10;
	} while (num > 0);

	if (is_negative)
		buffer[0] = '-';

	return (buffer);
}

/**
 * nosign_to_string - converts an unsigned integer to a string.
 *
 * @num: the unsigned integer to convert.
 * Return: a dynamically allocated string representing the unsigned integer.
 * The caller is responsible for freeing the memory.
 */
char *nosign_to_string(unsigned long num)
{
	int index, length = 1;
	unsigned long temp = num;
	char *buffer;

	while (temp >= 10)
	{
		temp /= 10;
		length++;
	}

	buffer = (char *)malloc(length + 1);

	if (buffer == NULL)
		return (NULL);

	index = length - 1;

	do {
		buffer[index--] = num % 10 + '0';
		num /= 10;
	} while (num > 0);

	buffer[length] = '\0';

	return (buffer);
}

/**
 * handle_integer - handles the integer specifier.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_integer(
va_list args, unsigned int *count, unsigned int *i,
int casing __attribute__((unused)), char flags, int width, int precision)
{
	long num;
	char *buffer, *new_buffer;
	int num_len;

	if (flags == 'l')
	{
		num = va_arg(args, long);
		buffer = int_to_string(num);
	}
	else
	{
		num = va_arg(args, int);
		buffer = int_to_string((int)num);
	}
	if (buffer == NULL)
		return;
	num_len = _strlen(buffer);
	new_buffer = handle_precision(buffer, precision, &num_len);
	if (width > num_len)
	{
		while (width > num_len)
		{
			write(1, " ", 1);
			(*count)++;
			width--;
		}
	}
	if ((flags == '+' || flags == ' ') && num >= 0)
	{
		char sign = (flags == '+') ? '+' : ' ';

		write(1, &sign, 1);
		(*count)++;
	}
	(*count) += print_string(new_buffer);
	(new_buffer != buffer) ? free(new_buffer) : free(buffer);
	(*i)++;
}

/**
 * handle_nosign - handles the unsigned specifier.
 *
 * @args: the va_list containing the argument
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier
 * @width: handles width.
 * @precision: handles precision..
 */
void handle_nosign(
va_list args, unsigned int *count, unsigned int *i,
int casing __attribute__((unused)), char flags, int width, int precision)
{
	unsigned long num;
	char *buffer, *new_buffer;
	int num_len;

	if (flags == 'l')
	{
		num = va_arg(args, unsigned long);
		buffer = nosign_to_string(num);
	}
	else if (flags == 'h')
	{
		num = va_arg(args, unsigned int);
		buffer = nosign_to_string((unsigned short)num);
	}
	else
	{
		num = va_arg(args, unsigned int);
		buffer = nosign_to_string((unsigned int)num);
	}
	if (buffer == NULL)
		return;
	num_len = _strlen(buffer);
	new_buffer = handle_precision(buffer, precision, &num_len);
	if (width > num_len)
	{
		char pad_char = (flags == '0') ? '0' : ' ';

		while (width > num_len)
		{
			write(1, &pad_char, 1);
			(*count)++;
			width--;
		}
	}
	(*count) += print_string(new_buffer);
	(new_buffer != buffer) ? free(new_buffer) : free(buffer);
	(*i)++;
}



HANDLERS2.C
#include "main.h"
/**
 * octal_to_string -a function that converts an octal number to a string.
 *
 * @octal: the octal number to convert.
 * Return: a dynamically allocated string representing the octal number.
 * The caller is responsible for freeing the memory.
 */
char *octal_to_string(unsigned long octal)
{
	int length = 0, index;
	char *buffer;
	unsigned long temp = octal;

	do {
		temp /= 8;
		length++;
	} while (temp > 0);

	buffer = (char *)malloc(length + 1);

	if (buffer == NULL)
		return (NULL);

	index = length - 1;

	do {
		buffer[index--] = (octal % 8) + '0';
		octal /= 8;
	} while (octal > 0);

	buffer[length] = '\0';

	return (buffer);
}

/**
 * handle_octal - a function that handles the octal specifier.
 *
 * @args: the va_list containing the argument.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_octal(
va_list args, unsigned int *count, unsigned int *i,
int casing __attribute__((unused)), char flags, int width, int precision)
{
	unsigned long octal;
	char *buffer, *new_buffer;
	int num_len;

	if (flags == 'l')
	{
		octal = va_arg(args, unsigned long);
		buffer = octal_to_string(octal);
	}
	else if (flags == 'h')
	{
		octal = va_arg(args, int);
		buffer = octal_to_string((unsigned int)(unsigned short)octal);
	}
	else
	{
		octal = va_arg(args, unsigned int);
		buffer = octal_to_string((unsigned int)octal);
	}
	if (buffer == NULL)
		return;
	num_len = _strlen(buffer);
	new_buffer = handle_precision(buffer, precision, &num_len);
	if (width > num_len)
	{
		char pad_char = (flags == '0') ? '0' : ' ';

		while (width > num_len)
		{
			write(1, &pad_char, 1);
			(*count)++;
			width--;
		}
	}
	(flags == '#' && octal != 0) ? (write(1, "0", 1), (*count)++) : 0;
	(*count) += print_string(new_buffer);
	(new_buffer != buffer) ? free(new_buffer) : free(buffer);
	(*i)++;
}

/**
 * hex_to_string - a function that converts a hexadecimal number to a string.
 *
 * @hex: the hexadecimal number to convert.
 * @casing: 0 for lowercase, 1 for uppercase.
 * Return: a dynamically allocated string representing the hexadecimal number.
 * The caller is responsible for freeing the memory.
 */
char *hex_to_string(unsigned long hex, int casing)
{
	const char *hex_chars;
	int length = 0, index;
	unsigned long temp = hex;
	char *buffer;

	hex_chars = (casing == 0) ? "0123456789abcdef" : "0123456789ABCDEF";

	do {
		temp /= 16;
		length++;
	} while (temp > 0);

	buffer = (char *)malloc(length + 1);

	if (buffer == NULL)
		return (NULL);

	index = length - 1;

	do {
		buffer[index--] = hex_chars[hex % 16];
		hex /= 16;
	} while (hex > 0);

	buffer[length] = '\0';

	return (buffer);
}

/**
 * handle_hex - a function that handles the hexadecimal specifier.
 *
 * @args: the va_list containing the argument.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_hex(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	unsigned long hex;
	char *buffer, *new_buffer;
	int buffer_len, pad_len;

	if (flags == 'l')
	{
		hex = va_arg(args, unsigned long);
		buffer = hex_to_string(hex, casing);
	}
	else if (flags == 'h')
	{
		hex = va_arg(args, unsigned int);
		buffer = hex_to_string((unsigned short)hex, casing);
	}
	else
	{
		hex = va_arg(args, unsigned int);
		buffer = hex_to_string((unsigned int)hex, casing);
	}
	if (buffer == NULL)
		return;
	buffer_len = _strlen(buffer);
	new_buffer = handle_precision(buffer, precision, &buffer_len);
	pad_len = width - buffer_len;
	if (pad_len > 0)
	{
		char pad_char = (flags == '0') ? '0' : ' ';

		while (pad_len > 0)
		{
			write(1, &pad_char, 1);
			(*count)++;
			pad_len--;
		}
	}
	(flags == '#' && hex != 0) ? (write(1, (casing == 0) ? "0x" : "0X", 2),
	(*count) += 2) : 0;
	(*count) += print_string(new_buffer);
	(new_buffer != buffer) ? free(new_buffer) : free(buffer);
	(*i)++;
}

/**
 * handle_percent - a function that handles the percent specifier.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_percent(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	(void) casing;
	(void) flags;
	(void) args;
	(void) precision;
	(void) width;

	write(1, "%", 1);
	(*count)++;
	(*i)++;
}



HANDLERS3.C
#include "main.h"

/**
 * handle_default - Handles the default case for unrecognized format specifiers
 *
 * @specifier: the unrecognized format specifier character.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 */
void handle_default(char specifier, unsigned int *count, unsigned int *i)
{
	write(1, "%", 1);
	write(1, &specifier, 1);
	(*count) += 2;
	(*i)++;
}

/**
 * print_hex - a function that prints a hexadecimal
 * number (always 2 characters wide).
 *
 * @num: the number to print in hexadecimal.
 * @count: a pointer to the count of characters printed.
 */
void print_hex(unsigned char num, unsigned int *count)
{
	char hex_chars[] = "0123456789ABCDEF";
	char hex[2];

	hex[0] = hex_chars[(num >> 4) & 0xF];
	hex[1] = hex_chars[num & 0xF];

	write(1, hex, 2);
	(*count) += 2;
}

/**
 * print_hexPointer - a funtion that converts a hexadecimal
 * number to a string and prints it.
 *
 * @hex: the hexadecimal number to convert and print.
 * @count: a pointer to the count of characters printed.
 */
void print_hexPointer(unsigned long hex, unsigned int *count)
{
	char hex_chars[] = "0123456789abcdef";
	char *buffer;
	int index = 0, length = 0;
	unsigned long temp = hex;

	if (hex == 0)
	{
		write(1, "0", 1);
		(*count)++;
	}
	else
	{
		do {
			temp /= 16;
			length++;
		} while (temp > 0);

		buffer = (char *)malloc(length);

		if (buffer == NULL)
			return;

		while (hex != 0)
		{
			buffer[index++] = hex_chars[hex % 16];
			hex /= 16;
		}

		while (index > 0)
		{
			write(1, &buffer[--index], 1);
			(*count)++;
		}

		free(buffer);
	}
}

/**
 * handle_custom_string - a function that handles the
 * custom string specifier %S.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_custom_string(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	char *str = va_arg(args, char *);
	int j;

	(void) casing;
	(void) flags;
	(void) width;
	(void) precision;

	if (str == NULL)
	{
		write(1, "(null)", 6);
		(*count) += 6;
	}
	else
	{
		for (j = 0; str[j] != '\0'; j++)
		{
			if (str[j] < 32 || str[j] >= 127)
			{
				write(1, "\\x", 2);
				(*count) += 2;
				print_hex(str[j], count);
			}
			else
			{
				write(1, &str[j], 1);
				(*count)++;
			}
		}
	}

	(*i)++;

}

/**
 * handle_pointer - a function that handles the pointer specifier %p.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flag for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_pointer(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	void *ptr = va_arg(args, void *);

	(void) casing;
	(void) flags;
	(void) precision;
	(void) width;

	if (ptr == NULL)
	{
		write(1, "(nil)", 5);
		(*count) += 5;
	}
	else
	{
		write(1, "0x", 2);
		(*count) += 2;
		print_hexPointer((unsigned long)ptr, count);
	}

	(*i)++;
}



HANDLERS4.C
#include "main.h"

/**
 * _strlen - a function that calculates the length of a string
 *
 * @str: the string to be measured
 * Return: the length of the string
 */
int _strlen(const char *str)
{
	int length = 0;

	while (str[length] != '\0')
		length++;

	return (length);
}

/**
 * reverse_string - a function that reverses a string in place
 *
 * @str: the string to be reversed
 */

void reverse_string(char *str)
{
	int length = _strlen(str);
	int i, j;
	char temp;

	for (i = 0, j = length - 1; i < j; i++, j--)
	{
		temp = str[i];
		str[i] = str[j];
		str[j] = temp;
	}
}

/**
 * handle_reverse - a function that prints a string in reverse
 * @args: the va_list that contains the argument
 * @count: a pointer to the count of characters printed
 * @i: a pointer to the current position of the string
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_reverse(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	char *str = va_arg(args, char *), *new_str;

	(void) casing;
	(void) flags;

	if (str == NULL)
	{
		write(1, "(null)", 6);
		(*count) += 6;
	}
	else
	{
		int length = _strlen(str);

		new_str = handle_precision(str, precision, &length);
		if (width > length)
		{
			int padding = width - length;

			while (padding > 0)
			{
				write(1, " ", 1);
				(*count)++;
				padding--;
			}
		}
		reverse_string(new_str);
		(*count) += print_string(new_str);
		(new_str != str) ? free(new_str) : (void)0;
	}
	(*i)++;
}

/**
 * rot13 - a function that applies the rot13 algorithm to a string
 * @str: the string that will ne rot13'ed
 */

void rot13(char *str)
{
	while (*str)
	{
		if ((*str >= 'a' && *str <= 'z'))
		{
			if (*str > 'm')
			{
				*str = *str - 13;
			}
			else
			{
				*str = *str + 13;
			}
		}
		else if ((*str >= 'A' && *str <= 'Z'))
		{
			if (*str > 'M')
			{
				*str = *str - 13;
			}
			else
			{
				*str = *str + 13;
			}
		}
		str++;
	}
}

/**
 * handle_rot13 - a funtion that handles the custom specifier %R.
 *
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @casing: 0 for lowercase, 1 for uppercase.
 * @flags: the flags for the specifier.
 * @width: handles width.
 * @precision: handles precision.
 */
void handle_rot13(
va_list args, unsigned int *count, unsigned int *i, int casing, char flags,
int width, int precision)
{
	char *str = va_arg(args, char *);

	(void) casing;
	(void) flags;
	(void) precision;
	(void) width;

	if (str == NULL)
	{
		write(1, "(null)", 6);
		(*count) += 6;
	}
	else
	{
		rot13(str);
		(*count) += print_string(str);
	}

	(*i)++;
}



HANDLERS5.C
#include "main.h"

/**
 * get_width - Handles getting the width for printing..
 *
 * @args: the va_list containing the argument for width.
 * @format: the format string being processed.
 * @i: a pointer to the current position in the format string.
 *
 * Return: the width.
 */
int get_width(va_list args, const char *format, unsigned int *i)
{
	unsigned int curr_i = (*i) + 1;
	int width = 0;

	for ( ; format[curr_i] != '\0'; curr_i++)
	{
		if (format[curr_i] == '*')
		{
			curr_i++;
			width = va_arg(args, int);
			break;
		}
		else if (format[curr_i] >= '0' && format[curr_i] <= '9')
		{
			width *= 10;
			width += format[curr_i] - '0';
		}
		else
			break;
	}

	(*i) = curr_i - 1;

	return (width);
}

/**
 * get_precision - Handles getting the precision for printing.
 *
 * @args: the va_list containing the argument for precision.
 * @format: the format string being processed.
 * @i: a pointer to the current position in the format string.
 *
 * Return: the precision.
 */
int get_precision(va_list args, const char *format, unsigned int *i)
{
	unsigned int curr_i = (*i) + 1;
	int precision = -1;

	if (format[curr_i] == '.')
	{
		curr_i++;
		if (format[curr_i] == '*')
		{
			curr_i++;
			precision = va_arg(args, int);
		}
		else if (format[curr_i] >= '0' && format[curr_i] <= '9')
		{
			precision = 0;
			while (format[curr_i] >= '0' && format[curr_i] <= '9')
			{
				precision = precision * 10 + (format[curr_i] - '0');
				curr_i++;
			}
		}
	}

	(*i) = curr_i - 1;

	return (precision);
}

/**
 * handle_precision - Handles precision for a string.
 *
 * @str: The string to apply precision to.
 * @precision: The precision value.
 * @num_len: A pointer to the length of the string.
 *
 * Return: a pointer to the modified string, or the original string if no
 * modification is performed.
 */
char *handle_precision(char *str, int precision, int *num_len)
{
	if (precision >= 0 && precision < *num_len)
	{
		char *nstr = malloc(precision + 1);
		int i = 0;

		if (nstr == NULL)
			return (NULL);
		while (str[i] != '\0' && i < precision)
		{
			nstr[i] = str[i];
			i++;
		}
		nstr[i] = '\0';
		*num_len = i;

		return (nstr);
	}

	return (str);
}



FORMAT_SPECIFIER.C
#include "main.h"

/**
 * handle_flags - A function that handles flag characters.
 *
 * @i: a pointer to the current position in the format string.
 * @format: the format string.
 *
 * Return: the flags as an integer.
 */
char handle_flags(const char *format, unsigned int *i)
{
	char flags = '\0';
	unsigned int current_index = *i;
	unsigned int next_index = current_index + 1;

	switch (format[next_index])
	{
		case '+':
			flags = '+';
			break;
		case ' ':
			flags = ' ';
			break;
		case '#':
			flags = '#';
			break;
		case 'l':
			flags = 'l';
			break;
		case 'h':
			flags = 'h';
			break;
	}

	if ((format[next_index + 1] == 'd' || format[next_index + 1] == 'i' ||
	format[next_index + 1] == 'o' || format[next_index + 1] == 'x' ||
	format[next_index + 1] == 'X' || format[next_index + 1] == 'u') &&
	flags != '\0')
	{
		(*i)++;
		return (flags);
	}

	return (flags);
}

/**
 * handle_format_specifier - A function that handles format specifiers.
 *
 * @specifier: the format specifier character
 * @args: the va_list containing the arguments.
 * @count: a pointer to the count of characters printed.
 * @i: a pointer to the current position in the format string.
 * @flags: the flags for the specifier.
 * @width: handling width.
 * @precision: handling precision.
 */
void handle_format_specifier(
char specifier, va_list args, unsigned int *count, unsigned int *i, char flags,
int width, int precision)
{
	int j, casing = 0;
	FormatSpecifier formatSpecifiers[] = {
		{'c', handle_char}, {'s', handle_string},
		{'%', handle_percent}, {'b', handle_binary},
		{'d', handle_integer}, {'i', handle_integer},
		{'u', handle_nosign}, {'o', handle_octal},
		{'x', handle_hex}, {'X', handle_hex},
		{'S', handle_custom_string}, {'p', handle_pointer},
		{'R', handle_rot13}, {'r', handle_reverse},
		{'\0', NULL} /* This marks the end of the array */
	};

	for (j = 0; formatSpecifiers[j].specifier != '\0'; j++)
	{
		if (formatSpecifiers[j].specifier == specifier)
		{
			if (specifier == 'X')
				casing = 1;
			formatSpecifiers[j].handler(args,
			count, i, casing, flags, width, precision);
			return;
		}
	}

	handle_default(specifier, count, i);
}



PRINTF.C
#include "main.h"

/**
 * _printf - A function that produces output according to a format.
 * this is the main file that contains the printf function
 *
 * @format: a character string that composes of zero or more directives.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end the output to strings).
 */

int _printf(const char *format, ...)
{
	va_list args;
	unsigned int i = 0, count = 0;
	int width = 0, precision = 0;

	if (format == NULL)
		return (-1);

	va_start(args, format);

	while (format[i] != '\0')
	{
		if (format[i] == '%' && format[i + 1] != '\0')
		{
			char flags = handle_flags(format, &i);

			width = get_width(args, format, &i);
			precision = get_precision(args, format, &i);
			handle_format_specifier(format[i + 1],
			args, &count, &i, flags, width, precision);
		}
		else
		{
			write(1, &format[i], 1);
			count++;
		}
		i++;
	}

	va_end(args);

	return (count);
}


